#include "keyboard.h"
#include "midihelper/midihelper.h"

u8 Keyboard::piano_bitmap[] = { // 126x32px
    0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe,
    0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xff, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8,
    0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
    0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00,
    0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8,
    0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8,
    0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00,
    0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff,
    0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8,
    0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00};

mios32_lcd_bitmap_t Keyboard::bitmap = MIOS32_LCD_BitmapInit(piano_bitmap, 126, 32, 126, 1);

void Keyboard::drawKeyboard()
{
    int octave = 1;
    for (int i = 1; i < 4; i++)
    {
        mios32_lcd_bitmap_t bitmap = MIOS32_LCD_BitmapInit(piano_bitmap, 126, 32, 126, 1);
        MIOS32_LCD_DeviceSet(i);
        MIOS32_LCD_CursorSet(0, 0);
        MIOS32_LCD_BitmapPrint(bitmap);
        MIOS32_LCD_GCursorSet(0, 40);
        MIOS32_LCD_PrintFormattedString("Octave: %d-%d", octave, octave+2);
        octave += 3;
    }
}

void Keyboard::drawNotestack(notestack_t notestack)
{
    int value;
    int octave;
    int display;
    int pixelColumnIndex;
    u8 byteToDraw;
    int height;
    for (size_t i = 0; i < notestack.len; i++)
    {

        value = notestack.note_items[i].note;
        MIOS32_MIDI_SendDebugMessage("Notestack Note: %d", value);

        if (MidiHelper::isFlat(value) == true) // black key
        {
            height = 15;
            // check if the note is pressed
            if (notestack.note_items[i].depressed == 0)
            {
                byteToDraw = 0x7F;
            }
            else
            {
                byteToDraw = 0x00;
            }
        }
        else // white key
        {
            height = 26;
            // check if the note is pressed
            if (notestack.note_items[i].depressed == 0)
            {
                byteToDraw = 0x00;
            }
            else
            {
                byteToDraw = 0x7F;
            }
        }

        if (value > 95 && value <= 107)
        {
            display = 3;
            octave = 84;
        }
        else if (value > 83 && value <= 95)
        {
            display = 3;
            octave = 42;
        }
        else if (value > 71 && value <= 83)
        {
            display = 3;
            octave = 0;
        }
        else if (value > 59 && value <= 71)
        {
            display = 2;
            octave = 84;
        }
        else if (value > 47 && value <= 59)
        {
            display = 2;
            octave = 42;
        }
        else if (value > 35 && value <= 47)
        {
            display = 2;
            octave = 0;
        }
        else if (value > 23 && value <= 35)
        {
            display = 1;
            octave = 84;
        }
        else if (value > 11)
        {
            display = 1;
            octave = 42;
        }
        else
        {
            display = 1;
            octave = 0;
        }

        // Note F upwards: correct collumn-index to fit Keyboard drawing
        if ((value % 12) >= 5)
        {
            // Special Case for B:
            if ((value % 12) == 11)
            {
                pixelColumnIndex = (((value - 1) % 12) + 3) * 3 + octave;
            }
            else
            {
                pixelColumnIndex = (((value + 1) % 12) + 1) * 3 + octave;
            }
        }
        else
        {
            pixelColumnIndex = ((value % 12) + 1) * 3 + octave;
        }
        MIOS32_MIDI_SendDebugString("Zeichne die bytes...");
        MIOS32_LCD_DeviceSet(display);
        MIOS32_LCD_GCursorSet(pixelColumnIndex - 2, height);
        MIOS32_LCD_Data(byteToDraw);
        MIOS32_LCD_GCursorSet(pixelColumnIndex - 1, height);
        MIOS32_LCD_Data(byteToDraw);
        MIOS32_LCD_GCursorSet(pixelColumnIndex, height);
        MIOS32_LCD_Data(byteToDraw);
        MIOS32_MIDI_SendDebugMessage("column index: %d, Zeilenindex: %d, byte: %x ", pixelColumnIndex, height, byteToDraw);
    }
}
