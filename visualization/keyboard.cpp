#include "keyboard.h"
#include "midihelper/midihelper.h"

u8 Keyboard::piano_bitmap[] = { // 126x32px
    0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe,
    0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xff, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8,
    0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
    0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00,
    0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8,
    0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8,
    0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00,
    0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff,
    0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8,
    0xff, 0xf8, 0xf8, 0x00, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00};

mios32_lcd_bitmap_t Keyboard::bitmap = MIOS32_LCD_BitmapInit(piano_bitmap, 126, 32, 126, 1);

void Keyboard::drawKeyboard()
{
    // draw keyboard on first 4 displays
    for (size_t i = 0; i < 4; i++)
    {
        MIOS32_LCD_DeviceSet(i);
        MIOS32_LCD_CursorSet(0, 0);
        MIOS32_LCD_BitmapPrint(bitmap);
    }
}

void Keyboard::drawNotestack(notestack_t notestack)
{
    int note;
    for (size_t i = 0; i < notestack.len; i++)
    {
        // check if the note is pressed
        if (notestack.note_items[i].depressed)
            continue;

        // select correct display
        // note = notestack.note_items[i].note;
        // if (note < 34)
        // {
        //     MIOS32_LCD_DeviceSet(0);
        //     note -= 33;
        // }
        // else if (note < 33 * 2 + 1)
        // {
        //     MIOS32_LCD_DeviceSet(1);
        //     note -= 33 * 2;
        // }
        // else if (note < 33 * 3 + 1)
        // {
        //     MIOS32_LCD_DeviceSet(2);
        //     note -= 33 * 3;
        // }
        // else if (note < 33 * 4 + 1)
        // {
        //     MIOS32_LCD_DeviceSet(3);
        //     note -= 33 * 4;
        // }

        // start of drawNote() sourcecode
        int octave;
        u8 byteToDraw;
        int height;
        // determine if note is a black or white key
        if (MidiHelper::isFlat(note)) // black key
        {
            height = 15;
            byteToDraw = 0x7F;
        }
        else // white key
        {
            height = 26;
            byteToDraw = 0x00;
        }
        
        int pixelOffset, pixelColumnIndex;
        // calculate offset resulting from notes b & c and the octaves
        if (note > 23) // 3rd ocatve
            pixelOffset = 84 + 2;
        else if (note > 11) // 2nd octave
            pixelOffset = 42 + 1;
        else // 1st octave
            pixelOffset = 0;

        // calculate offset resulting from note e & f
        if (note % 12 > 4)
            pixelOffset += 1;

        // draw
        pixelColumnIndex = ((note % 12) + 1) * 3 + pixelOffset;
        MIOS32_LCD_GCursorSet(pixelColumnIndex - 2, height);
        MIOS32_LCD_Data(byteToDraw);
        MIOS32_LCD_GCursorSet(pixelColumnIndex - 1, height);
        MIOS32_LCD_Data(byteToDraw);
        MIOS32_LCD_GCursorSet(pixelColumnIndex, height);
        MIOS32_LCD_Data(byteToDraw);
    }
}